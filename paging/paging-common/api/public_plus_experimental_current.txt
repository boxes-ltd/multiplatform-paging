// Signature format: 4.0
package androidx.paging {

  public final class CachedPagingDataKt {
    method @CheckResult public static <T> kotlinx.coroutines.flow.Flow<androidx.paging.PagingData<T>> cachedIn(kotlinx.coroutines.flow.Flow<androidx.paging.PagingData<T>>, kotlinx.coroutines.CoroutineScope scope);
  }

  public final class CombinedLoadStates {
    ctor public CombinedLoadStates(androidx.paging.LoadState refresh, androidx.paging.LoadState prepend, androidx.paging.LoadState append, androidx.paging.LoadStates source, optional androidx.paging.LoadStates? mediator);
    method public androidx.paging.LoadState getAppend();
    method public androidx.paging.LoadStates? getMediator();
    method public androidx.paging.LoadState getPrepend();
    method public androidx.paging.LoadState getRefresh();
    method public androidx.paging.LoadStates getSource();
    property public final androidx.paging.LoadState append;
    property public final androidx.paging.LoadStates? mediator;
    property public final androidx.paging.LoadState prepend;
    property public final androidx.paging.LoadState refresh;
    property public final androidx.paging.LoadStates source;
  }

  @kotlin.RequiresOptIn public @interface ExperimentalPagingApi {
  }

  public final class InvalidatingPagingSourceFactory<Key, Value> implements kotlin.jvm.functions.Function0<androidx.paging.PagingSource<Key,Value>> {
    ctor public InvalidatingPagingSourceFactory(kotlin.jvm.functions.Function0<? extends androidx.paging.PagingSource<Key,Value>> pagingSourceFactory);
    method public void invalidate();
    method public androidx.paging.PagingSource<Key,Value> invoke();
  }

  public final class ItemSnapshotList<T> extends kotlin.collections.AbstractList<T> {
    ctor public ItemSnapshotList(@IntRange(from=0L) int placeholdersBefore, @IntRange(from=0L) int placeholdersAfter, java.util.List<? extends T> items);
    method public T? get(int index);
    method public java.util.List<T> getItems();
    method public int getPlaceholdersAfter();
    method public int getPlaceholdersBefore();
    method public int getSize();
    property public final java.util.List<T> items;
    property public final int placeholdersAfter;
    property public final int placeholdersBefore;
    property public int size;
  }

  public abstract sealed class LoadState {
    method public final boolean getEndOfPaginationReached();
    property public final boolean endOfPaginationReached;
  }

  public static final class LoadState.Error extends androidx.paging.LoadState {
    ctor public LoadState.Error(Throwable error);
    method public Throwable getError();
    property public final Throwable error;
  }

  public static final class LoadState.Loading extends androidx.paging.LoadState {
    field public static final androidx.paging.LoadState.Loading INSTANCE;
  }

  public static final class LoadState.NotLoading extends androidx.paging.LoadState {
    ctor public LoadState.NotLoading(boolean endOfPaginationReached);
  }

  public final class LoadStates {
    ctor public LoadStates(androidx.paging.LoadState refresh, androidx.paging.LoadState prepend, androidx.paging.LoadState append);
    method public androidx.paging.LoadState component1();
    method public androidx.paging.LoadState component2();
    method public androidx.paging.LoadState component3();
    method public androidx.paging.LoadStates copy(androidx.paging.LoadState refresh, androidx.paging.LoadState prepend, androidx.paging.LoadState append);
    method public androidx.paging.LoadState getAppend();
    method public androidx.paging.LoadState getPrepend();
    method public androidx.paging.LoadState getRefresh();
    property public final androidx.paging.LoadState append;
    property public final androidx.paging.LoadState prepend;
    property public final androidx.paging.LoadState refresh;
  }

  public enum LoadType {
    method public static androidx.paging.LoadType valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.paging.LoadType[] values();
    enum_constant public static final androidx.paging.LoadType APPEND;
    enum_constant public static final androidx.paging.LoadType PREPEND;
    enum_constant public static final androidx.paging.LoadType REFRESH;
  }

  public final class Pager<Key, Value> {
    ctor @androidx.paging.ExperimentalPagingApi public Pager(androidx.paging.PagingConfig config, optional Key? initialKey, androidx.paging.RemoteMediator<Key,Value>? remoteMediator, kotlin.jvm.functions.Function0<? extends androidx.paging.PagingSource<Key,Value>> pagingSourceFactory);
    ctor public Pager(androidx.paging.PagingConfig config, optional Key? initialKey, kotlin.jvm.functions.Function0<? extends androidx.paging.PagingSource<Key,Value>> pagingSourceFactory);
    ctor public Pager(androidx.paging.PagingConfig config, kotlin.jvm.functions.Function0<? extends androidx.paging.PagingSource<Key,Value>> pagingSourceFactory);
    method public kotlinx.coroutines.flow.Flow<androidx.paging.PagingData<Value>> getFlow();
    property public final kotlinx.coroutines.flow.Flow<androidx.paging.PagingData<Value>> flow;
  }

  public final class PagingConfig {
    ctor public PagingConfig(int pageSize, optional @IntRange(from=0L) int prefetchDistance, optional boolean enablePlaceholders, optional @IntRange(from=1L) int initialLoadSize, optional @IntRange(from=2L) int maxSize, optional int jumpThreshold);
    ctor public PagingConfig(int pageSize, optional @IntRange(from=0L) int prefetchDistance, optional boolean enablePlaceholders, optional @IntRange(from=1L) int initialLoadSize, optional @IntRange(from=2L) int maxSize);
    ctor public PagingConfig(int pageSize, optional @IntRange(from=0L) int prefetchDistance, optional boolean enablePlaceholders, optional @IntRange(from=1L) int initialLoadSize);
    ctor public PagingConfig(int pageSize, optional @IntRange(from=0L) int prefetchDistance, optional boolean enablePlaceholders);
    ctor public PagingConfig(int pageSize, optional @IntRange(from=0L) int prefetchDistance);
    ctor public PagingConfig(int pageSize);
    field public static final androidx.paging.PagingConfig.Companion Companion;
    field public static final int MAX_SIZE_UNBOUNDED = 2147483647; // 0x7fffffff
    field public final boolean enablePlaceholders;
    field public final int initialLoadSize;
    field public final int jumpThreshold;
    field public final int maxSize;
    field public final int pageSize;
    field public final int prefetchDistance;
  }

  public static final class PagingConfig.Companion {
  }

  public final class PagingData<T> {
    method public static <T> androidx.paging.PagingData<T> empty();
    method public static <T> androidx.paging.PagingData<T> empty(androidx.paging.LoadStates sourceLoadStates, optional androidx.paging.LoadStates? mediatorLoadStates);
    method public static <T> androidx.paging.PagingData<T> empty(androidx.paging.LoadStates sourceLoadStates);
    method public static <T> androidx.paging.PagingData<T> from(java.util.List<? extends T> data);
    method public static <T> androidx.paging.PagingData<T> from(java.util.List<? extends T> data, androidx.paging.LoadStates sourceLoadStates, optional androidx.paging.LoadStates? mediatorLoadStates);
    method public static <T> androidx.paging.PagingData<T> from(java.util.List<? extends T> data, androidx.paging.LoadStates sourceLoadStates);
    field public static final androidx.paging.PagingData.Companion Companion;
  }

  public static final class PagingData.Companion {
    method public <T> androidx.paging.PagingData<T> empty();
    method public <T> androidx.paging.PagingData<T> empty(androidx.paging.LoadStates sourceLoadStates, optional androidx.paging.LoadStates? mediatorLoadStates);
    method public <T> androidx.paging.PagingData<T> empty(androidx.paging.LoadStates sourceLoadStates);
    method public <T> androidx.paging.PagingData<T> from(java.util.List<? extends T> data);
    method public <T> androidx.paging.PagingData<T> from(java.util.List<? extends T> data, androidx.paging.LoadStates sourceLoadStates, optional androidx.paging.LoadStates? mediatorLoadStates);
    method public <T> androidx.paging.PagingData<T> from(java.util.List<? extends T> data, androidx.paging.LoadStates sourceLoadStates);
  }

  public final class PagingDataTransforms {
    method @CheckResult public static <T> androidx.paging.PagingData<T> filter(androidx.paging.PagingData<T>, java.util.concurrent.Executor executor, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> predicate);
    method @CheckResult @kotlin.jvm.JvmSynthetic public static <T> androidx.paging.PagingData<T>! filter(androidx.paging.PagingData<T>, kotlin.jvm.functions.Function2<? super T,? super kotlin.coroutines.Continuation<? super java.lang.Boolean>,?> predicate);
    method @CheckResult public static <T, R> androidx.paging.PagingData<R> flatMap(androidx.paging.PagingData<T>, java.util.concurrent.Executor executor, kotlin.jvm.functions.Function1<? super T,? extends java.lang.Iterable<? extends R>> transform);
    method @CheckResult @kotlin.jvm.JvmSynthetic public static <T extends java.lang.Object, R> androidx.paging.PagingData<R>! flatMap(androidx.paging.PagingData<T>, kotlin.jvm.functions.Function2<? super T,? super kotlin.coroutines.Continuation<? super java.lang.Iterable<? extends R>>,?> transform);
    method @CheckResult public static <T> androidx.paging.PagingData<T> insertFooterItem(androidx.paging.PagingData<T>, optional androidx.paging.TerminalSeparatorType terminalSeparatorType, T item);
    method @CheckResult public static <T> androidx.paging.PagingData<T> insertFooterItem(androidx.paging.PagingData<T>, T item);
    method @CheckResult public static <T> androidx.paging.PagingData<T> insertHeaderItem(androidx.paging.PagingData<T>, optional androidx.paging.TerminalSeparatorType terminalSeparatorType, T item);
    method @CheckResult public static <T> androidx.paging.PagingData<T> insertHeaderItem(androidx.paging.PagingData<T>, T item);
    method @CheckResult public static <R, T extends R> androidx.paging.PagingData<R> insertSeparators(androidx.paging.PagingData<T>, optional androidx.paging.TerminalSeparatorType terminalSeparatorType, java.util.concurrent.Executor executor, kotlin.jvm.functions.Function2<? super T,? super T,? extends R> generator);
    method @CheckResult public static <R, T extends R> androidx.paging.PagingData<R> insertSeparators(androidx.paging.PagingData<T>, java.util.concurrent.Executor executor, kotlin.jvm.functions.Function2<? super T,? super T,? extends R> generator);
    method @CheckResult @kotlin.jvm.JvmSynthetic public static <T extends R, R> androidx.paging.PagingData<R>! insertSeparators(androidx.paging.PagingData<T>, optional androidx.paging.TerminalSeparatorType terminalSeparatorType, kotlin.jvm.functions.Function3<? super T,? super T,? super kotlin.coroutines.Continuation<? super R>,?> generator);
    method @CheckResult public static <T, R> androidx.paging.PagingData<R> map(androidx.paging.PagingData<T>, java.util.concurrent.Executor executor, kotlin.jvm.functions.Function1<? super T,? extends R> transform);
    method @CheckResult @kotlin.jvm.JvmSynthetic public static <T extends java.lang.Object, R> androidx.paging.PagingData<R>! map(androidx.paging.PagingData<T>, kotlin.jvm.functions.Function2<? super T,? super kotlin.coroutines.Continuation<? super R>,?> transform);
  }

  public abstract class PagingSource<Key, Value> {
    ctor public PagingSource();
    method public final boolean getInvalid();
    method public boolean getJumpingSupported();
    method public boolean getKeyReuseSupported();
    method public abstract Key? getRefreshKey(androidx.paging.PagingState<Key,Value> state);
    method public final void invalidate();
    method public abstract suspend Object? load(androidx.paging.PagingSource.LoadParams<Key> params, kotlin.coroutines.Continuation<? super androidx.paging.PagingSource.LoadResult<Key,Value>>);
    method public final void registerInvalidatedCallback(kotlin.jvm.functions.Function0<kotlin.Unit> onInvalidatedCallback);
    method public final void unregisterInvalidatedCallback(kotlin.jvm.functions.Function0<kotlin.Unit> onInvalidatedCallback);
    property public final boolean invalid;
    property public boolean jumpingSupported;
    property public boolean keyReuseSupported;
  }

  public abstract static sealed class PagingSource.LoadParams<Key> {
    method public abstract Key? getKey();
    method public final int getLoadSize();
    method public final boolean getPlaceholdersEnabled();
    property public abstract Key? key;
    property public final int loadSize;
    property public final boolean placeholdersEnabled;
  }

  public static final class PagingSource.LoadParams.Append<Key> extends androidx.paging.PagingSource.LoadParams<Key> {
    ctor public PagingSource.LoadParams.Append(Key key, int loadSize, boolean placeholdersEnabled);
    method public Key getKey();
    property public Key key;
  }

  public static final class PagingSource.LoadParams.Prepend<Key> extends androidx.paging.PagingSource.LoadParams<Key> {
    ctor public PagingSource.LoadParams.Prepend(Key key, int loadSize, boolean placeholdersEnabled);
    method public Key getKey();
    property public Key key;
  }

  public static final class PagingSource.LoadParams.Refresh<Key> extends androidx.paging.PagingSource.LoadParams<Key> {
    ctor public PagingSource.LoadParams.Refresh(Key? key, int loadSize, boolean placeholdersEnabled);
    method public Key? getKey();
    property public Key? key;
  }

  public abstract static sealed class PagingSource.LoadResult<Key, Value> {
  }

  public static final class PagingSource.LoadResult.Error<Key, Value> extends androidx.paging.PagingSource.LoadResult<Key,Value> {
    ctor public PagingSource.LoadResult.Error(Throwable throwable);
    method public Throwable component1();
    method public androidx.paging.PagingSource.LoadResult.Error<Key,Value> copy(Throwable throwable);
    method public Throwable getThrowable();
    property public final Throwable throwable;
  }

  public static final class PagingSource.LoadResult.Invalid<Key, Value> extends androidx.paging.PagingSource.LoadResult<Key,Value> {
    ctor public PagingSource.LoadResult.Invalid();
  }

  public static final class PagingSource.LoadResult.Page<Key, Value> extends androidx.paging.PagingSource.LoadResult<Key,Value> implements java.lang.Iterable<Value> kotlin.jvm.internal.markers.KMappedMarker {
    ctor public PagingSource.LoadResult.Page(java.util.List<? extends Value> data, Key? prevKey, Key? nextKey, optional @IntRange(from=androidx.paging.PagingSource.LoadResult.Page.COUNT_UNDEFINED.toLong()) int itemsBefore, optional @IntRange(from=androidx.paging.PagingSource.LoadResult.Page.COUNT_UNDEFINED.toLong()) int itemsAfter);
    ctor public PagingSource.LoadResult.Page(java.util.List<? extends Value> data, Key? prevKey, Key? nextKey);
    method public java.util.List<Value> component1();
    method public Key? component2();
    method public Key? component3();
    method public int component4();
    method public int component5();
    method public androidx.paging.PagingSource.LoadResult.Page<Key,Value> copy(java.util.List<? extends Value> data, Key? prevKey, Key? nextKey, @IntRange(from=-2147483648L) int itemsBefore, @IntRange(from=-2147483648L) int itemsAfter);
    method public java.util.List<Value> getData();
    method public int getItemsAfter();
    method public int getItemsBefore();
    method public Key? getNextKey();
    method public Key? getPrevKey();
    method public java.util.Iterator<Value> iterator();
    property public final java.util.List<Value> data;
    property public final int itemsAfter;
    property public final int itemsBefore;
    property public final Key? nextKey;
    property public final Key? prevKey;
    field public static final int COUNT_UNDEFINED = -2147483648; // 0x80000000
    field public static final androidx.paging.PagingSource.LoadResult.Page.Companion Companion;
  }

  public static final class PagingSource.LoadResult.Page.Companion {
  }

  public final class PagingState<Key, Value> {
    ctor public PagingState(java.util.List<androidx.paging.PagingSource.LoadResult.Page<Key,Value>> pages, Integer? anchorPosition, androidx.paging.PagingConfig config, @IntRange(from=0L) int leadingPlaceholderCount);
    method public Value? closestItemToPosition(int anchorPosition);
    method public androidx.paging.PagingSource.LoadResult.Page<Key,Value>? closestPageToPosition(int anchorPosition);
    method public Value? firstItemOrNull();
    method public Integer? getAnchorPosition();
    method public androidx.paging.PagingConfig getConfig();
    method public java.util.List<androidx.paging.PagingSource.LoadResult.Page<Key,Value>> getPages();
    method public boolean isEmpty();
    method public Value? lastItemOrNull();
    property public final Integer? anchorPosition;
    property public final androidx.paging.PagingConfig config;
    property public final java.util.List<androidx.paging.PagingSource.LoadResult.Page<Key,Value>> pages;
  }

  @androidx.paging.ExperimentalPagingApi public abstract class RemoteMediator<Key, Value> {
    ctor public RemoteMediator();
    method public suspend Object? initialize(kotlin.coroutines.Continuation<? super androidx.paging.RemoteMediator.InitializeAction>);
    method public abstract suspend Object? load(androidx.paging.LoadType loadType, androidx.paging.PagingState<Key,Value> state, kotlin.coroutines.Continuation<? super androidx.paging.RemoteMediator.MediatorResult>);
  }

  public enum RemoteMediator.InitializeAction {
    method public static androidx.paging.RemoteMediator.InitializeAction valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.paging.RemoteMediator.InitializeAction[] values();
    enum_constant public static final androidx.paging.RemoteMediator.InitializeAction LAUNCH_INITIAL_REFRESH;
    enum_constant public static final androidx.paging.RemoteMediator.InitializeAction SKIP_INITIAL_REFRESH;
  }

  public abstract static sealed class RemoteMediator.MediatorResult {
  }

  public static final class RemoteMediator.MediatorResult.Error extends androidx.paging.RemoteMediator.MediatorResult {
    ctor public RemoteMediator.MediatorResult.Error(Throwable throwable);
    method public Throwable getThrowable();
    property public final Throwable throwable;
  }

  public static final class RemoteMediator.MediatorResult.Success extends androidx.paging.RemoteMediator.MediatorResult {
    ctor public RemoteMediator.MediatorResult.Success(boolean endOfPaginationReached);
    method public boolean getEndOfPaginationReached();
    property public final boolean endOfPaginationReached;
  }

  public final class RemoteMediatorAccessorKt {
  }

  public final class SeparatorsKt {
  }

  public enum TerminalSeparatorType {
    method public static androidx.paging.TerminalSeparatorType valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.paging.TerminalSeparatorType[] values();
    enum_constant public static final androidx.paging.TerminalSeparatorType FULLY_COMPLETE;
    enum_constant public static final androidx.paging.TerminalSeparatorType SOURCE_COMPLETE;
  }

}

